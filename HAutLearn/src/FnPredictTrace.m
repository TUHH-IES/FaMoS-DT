function [sim_x, sim_state] = FnPredictTrace(trace,conditions,ode)
    global num_var tolLI Ts
    offsetPred = 0+1;
    sim_x = trace.x(offsetPred,:);
    lastSwitch = 1;
    sim_state = 1;
    curr_state = 1;
    for j = 1:size(trace.chpoints,1)
        if trace.chpoints(j,1) > offsetPred
            break;
        end
        lastSwitch = trace.chpoints(j,1);
        sim_state = trace.labels_trace(j,1);
        curr_state = trace.labels_trace(j,1);
    end
    for i = 1:size(trace.x,1)
        A = cell2mat(ode(curr_state));
        A = A(1:size(A,1),1:size(A,1));
        curr_x = sim_x(end,1:size(A,1))';
        new_x_dot = A * curr_x;
        new_x = [curr_x(1:end,1); new_x_dot((end-num_var+1):end,1)];
        for j = (size(new_x,1)-num_var):-1:1
            new_x(j,1) = new_x(j,1) + new_x(j+num_var,1) * Ts;
        end
        sim_x(end,size(A,1)+(1:num_var)) = new_x_dot((end-num_var+1):end,1)';
        sim_x = [sim_x; new_x', zeros(1,size(sim_x,2)-size(new_x,1))];
        sim_state = [sim_state; curr_state];
        last_state = curr_state;
        
        for j = 1:size(conditions,1) %determinsm and no multiple trans assumed
            condition = conditions(j,:);
            if(condition(1,1) == curr_state)
                overall_sum = +1.0; %always part of condition generated by HAutLearn
                for k = 1:num_var
                    overall_sum = overall_sum + new_x(k,1) * condition(1,2+k);
                end
                %condition holds
                if((overall_sum < tolLI && condition(1,2+num_var+1) == -1) || ...
                   (overall_sum > -tolLI && condition(1,2+num_var+1) == +1))
                    curr_state = condition(1,2);
                    break;
                end
            end
        end

        if(last_state ~= curr_state)
            lastSwitch = i;
        end
    end
end